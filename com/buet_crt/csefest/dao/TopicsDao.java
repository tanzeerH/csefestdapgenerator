package com.buet_crt.csefest.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.buet_crt.csefest.dao.Topics;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TOPICS.
*/
public class TopicsDao extends AbstractDao<Topics, Void> {

    public static final String TABLENAME = "TOPICS";

    /**
     * Properties of entity Topics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
    };

    private Query<Topics> subject_TopicsListQuery;

    public TopicsDao(DaoConfig config) {
        super(config);
    }
    
    public TopicsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TOPICS' (" + //
                "'TITLE' TEXT," + // 0: title
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 1: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TOPICS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Topics entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Topics readEntity(Cursor cursor, int offset) {
        Topics entity = new Topics( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // title
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Topics entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Topics entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Topics entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "topicsList" to-many relationship of Subject. */
    public List<Topics> _querySubject_TopicsList(Long id) {
        synchronized (this) {
            if (subject_TopicsListQuery == null) {
                QueryBuilder<Topics> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                subject_TopicsListQuery = queryBuilder.build();
            }
        }
        Query<Topics> query = subject_TopicsListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
